{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          this._indexToSelect = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero.\n        left: left || null,\n        right: right || null,\n      };\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      const child = layoutElement.childNodes[i];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","_updatePagination","_alignInkBarToSelectedTab","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","_realignInkBar","merge","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","tabs","i","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_left","_width","_right","opened","mode","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","diameters","Set","BASE_SIZE","styleTag","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","animationMode","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","_classList","newElevation","_previousElevation","MatMenu","addItem","item","_items","_itemChanges","removeItem","setPositionClasses","posX","posY","xPosition","yPosition","classes","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","panelOpen","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","focusedOption","focusedIndex","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","setFocusOrigin","resetActiveItem","customElevation","c","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","FixedTileStyler","reset","list","_setListStyle","_tiles","tile","_setStyle","TileStyler","RatioTileStyler","_parseRatio","setRowStyles","rowIndex","percentWidth","gutterWidth","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","getTilePosition","calc","getTileSize","rowspan","getComputedHeight","getTileSpan","getGutterSpan","ratioParts","FitTileStyler","_rowspan","gutterHeightPerTile","_rows","MatGridList","_gutter","_cols","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","cols","rowHeight","_tileStyler","tracker","TileCoordinator","init","gutterSize","setStyle","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_inputSubscription","_disabledChange","_popupRef","_popupComponentRef","date","_dateAdapter","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","_gutterSize","normalizeUnits","sizePercent","gutterFraction","baseSize","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","baseTileWidth","side","tileHeight","fixedRowHeight","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_handleCalendarBodyKeydown","oldActiveDate","_activeDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","activeDateChange","_focusActiveCell","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","minDate","maxDate","_hasSameMonthAndYear","d1","d2","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","panelWidth","_getHostWidth","autoActiveFirstOption","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}